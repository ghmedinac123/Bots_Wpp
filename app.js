const { createBot, createProvider, createFlow,  addKeyword,EVENTS } = require('@bot-whatsapp/bot');
const MongoAdapter = require('@bot-whatsapp/database/mongo');
const QRPortalWeb = require('@bot-whatsapp/portal');
const BaileysProvider = require('@bot-whatsapp/provider/baileys');
const { downloadMediaMessage } = require('@adiwajshing/baileys');
const MySQLAdapter = require('@bot-whatsapp/database/mysql');
const axios = require('axios');
const path = require("path");
const fs = require("fs");
const { exec } = require('child_process');

const{ handlerAI }=require("./whisper.js")

const menuPath = path.join(__dirname, "mensajes", "menu.txt");
const menu = fs.readFileSync(menuPath, "utf-8"); 

const menuPath2 = path.join(__dirname, "mensajes", "menu_planes.txt");
const menu_planes = fs.readFileSync(menuPath2, "utf-8");

const menuPath3 = path.join(__dirname, "mensajes", "sector_urbano.txt");
const plan_urbano = fs.readFileSync(menuPath3, "utf-8");


const menuPath4 = path.join(__dirname, "mensajes", "sector_rural.txt");
const plan_rural = fs.readFileSync(menuPath4, "utf-8");

const menuPath5 = path.join(__dirname, "mensajes", "sector_rural_sanroque.txt");
const plan_rural_sanroque = fs.readFileSync(menuPath5, "utf-8");

const menuPath6 = path.join(__dirname, "mensajes", "sector_rural_quituro.txt");
const plan_rural_quituro = fs.readFileSync(menuPath6, "utf-8");

const menuPath7 = path.join(__dirname, "mensajes", "sector_rural_sanadolfo.txt");
const plan_rural_sanadolfo = fs.readFileSync(menuPath7, "utf-8");

const menuPath8 = path.join(__dirname, "mensajes", "sector_rural_caserio.txt");
const plan_rural_caserio = fs.readFileSync(menuPath8, "utf-8");


const BOTNAME = 'bot'
QRPortalWeb({ name: BOTNAME, port: 3052 })

/**
 * Declaramos las conexiones de MySQL
 */
// const MYSQL_DB_HOST = 'localhost'
// const MYSQL_DB_USER = 'root'
// const MYSQL_DB_PASSWORD = 'GBBGH4R53A8FGLS'
// const MYSQL_DB_NAME = 'bots'
// const MYSQL_DB_PORT = '3306'
/**
 * Declaramos las conexiones MONGODB
 */


//Funci√≥n para predecir cobertura a partir de coordenadas usando tu API
const predictCoverageFromCoordinates = async (latitude, longitude) => {
    try {
        console.log(`üîÑ Enviando coordenadas a la API de predicci√≥n: Latitud ${latitude}, Longitud ${longitude}`);
        const response = await axios.post('http://198.50.181.104:8001/predict', {
            coordinates: `${latitude},${longitude}`
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = response.data;
        console.log(`üîÑ Respuesta de la API: ${JSON.stringify(data)}`);
        
        if (data.error) {
            throw new Error(data.error);
        }

        // Manejo de la respuesta de cobertura
        const hasCoverage = data.coverage === 'S√≠' || data.coverage === 'S\u00ed';
        return {
            hasCoverage: hasCoverage,
            coordinates: data.coordinates
        };
    } catch (error) {
        console.error(`‚ùå Error de la API: ${error}`);
        throw error;
    }
}
// Funci√≥n para consultar el chatbot externo
const queryExternalChatbot = async (message) => {
    try {
        const response = await axios.post('http://198.50.181.104:6002/chat', {
            text: message  // Aseg√∫rate de que el nombre del par√°metro sea 'text'
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        console.log('ü§ñ Chatbot API conectado correctamente.');
        
        // Imprimir el mensaje que retorna el chatbot
        console.log('üí¨ Respuesta del chatbot:', response.data.text);
        
        return response.data.text;  // Aseg√∫rate de que el JSON response key es 'text'
    } catch (error) {
        console.error('‚ùå Error conectando a la Chatbot API:', error);
        return null;
    }
};



const flowVoice = addKeyword(EVENTS.VOICE_NOTE).addAnswer("Esta es una nota de voz. Voy a procesarla con IA.", null, async (ctx, ctxFn) => {
    const audioPath = `${process.cwd()}/tmp/voice-note-${Date.now()}.ogg`;
    const wavPath = audioPath.replace('.ogg', '.wav');
    
    try {
        console.log("Descargando el archivo de audio desde el mensaje.");
        const buffer = await downloadMediaMessage(ctx, 'buffer');
        fs.writeFileSync(audioPath, buffer);
        console.log('Archivo de audio descargado correctamente.');

        // Verificar el tama√±o del archivo
        const fileSize = fs.statSync(audioPath).size;
        console.log(`Tama√±o del archivo descargado: ${fileSize} bytes`);

        if (fileSize === 0) {
            throw new Error('El archivo de audio descargado est√° vac√≠o.');
        }

        // Asegurarse de que el archivo existe
        if (!fs.existsSync(audioPath)) {
            throw new Error(`El archivo ${audioPath} no existe.`);
        }

        // Ejecutar el script de Python para la conversi√≥n y transcripci√≥n
        exec(`python /home/FututelBots/newBots2/base-baileys-mysql/transcribe_api_key.py ${audioPath}`, async (error, stdout, stderr) => {
            if (error) {
                console.error(`Error al ejecutar el script de Python: ${error.message}`);
                console.error(`stderr: ${stderr}`);
                console.error(`stdout: ${stdout}`);
                return;
            }
            if (stderr) {
                console.error(`Error en el script de Python: ${stderr}`);
                return;
            }

            console.log("Respuesta del script de Python:", stdout);

            try {
                const responseData = JSON.parse(stdout);
                if (responseData.transcript) {
                    // Enviar el texto transcrito al usuario
                    await ctxFn.flowDynamic([{ body: `Tu nota de voz convertida en texto: ${responseData.transcript}` }]);
                    
                    // Consultar el chatbot externo con la transcripci√≥n
                    const chatbotResponse = await queryExternalChatbot(responseData.transcript);

                    if (!chatbotResponse) {
                        await ctxFn.flowDynamic([{ body: "Lo siento, hubo un error al obtener una respuesta del chatbot." }]);
                    } else {
                        await ctxFn.flowDynamic([{ body: chatbotResponse }]);
                    }
                } else {
                    await ctxFn.flowDynamic([{ body: responseData.error || "Error desconocido al procesar la transcripci√≥n." }]);
                }
            } catch (e) {
                console.error(`Error al parsear la respuesta del script de Python: ${e.message}`);
                await ctxFn.flowDynamic([{ body: "Lo siento, ocurri√≥ un error inesperado al procesar tu nota de voz." }]);
            } finally {
                // Eliminar archivos temporales
                if (fs.existsSync(audioPath)) {
                    fs.unlinkSync(audioPath);
                }
                if (fs.existsSync(wavPath)) {
                    fs.unlinkSync(wavPath);
                }
            }
        });

    } catch (error) {
        console.error("Error al procesar la nota de voz:", error);
        await ctxFn.flowDynamic([{ body: "Lo siento, ocurri√≥ un error inesperado al procesar tu nota de voz." }]);
    }
});





const humanAgent = '5731688833245@s.whatsapp.net';

const sendToHumanAgent = async (provider, message) => {
  
    console.log('Mensaje a enviar:', message);

    if (!provider) {
        console.error('Proveedor de Baileys no est√° definido.');
        return;
    }

    try {
        await provider.sendText(humanAgent, message);
        console.log('Mensaje enviado al agente humano.');
    } catch (error) {
        console.error('Error al enviar mensaje al agente humano:', error);
    }
};

const flowRecopilarDatos = addKeyword(EVENTS.ACTION)
    .addAnswer('Si te interesa contratar el servicio, env√≠anos los siguientes datos: üìë\n‚úì Nombre completo del titular.', {
        capture: true
    }, async (ctx, { flowDynamic, state }) => {
        await state.update({ name: ctx.body });
        await flowDynamic('Gracias por tu nombre');
    })
    .addAnswer('¬øCu√°l es tu n√∫mero de c√©dula del titular?', { capture: true }, async (ctx, { flowDynamic, state }) => {
        await state.update({ idNumber: ctx.body });
        await flowDynamic('Gracias por tu n√∫mero de c√©dula.');
    })
    .addAnswer('¬øCu√°l es tu direcci√≥n completa de residencia?', { capture: true }, async (ctx, { flowDynamic, state }) => {
        await state.update({ address: ctx.body });
        await flowDynamic('Gracias por tu direcci√≥n. ');
    })
    .addAnswer('¬øCu√°les son los dos n√∫meros de celular de contacto?', { capture: true }, async (ctx, { flowDynamic, state }) => {
        await state.update({ contactNumbers: ctx.body });
        await flowDynamic('Gracias por los n√∫meros de contacto');
    })
    .addAnswer('Por favor, env√≠a una fotograf√≠a del recibo de energ√≠a.', { capture: true }, async (ctx, { flowDynamic, state }) => {
        await state.update({ energyBill: ctx.body });
        await flowDynamic('Gracias por la fotograf√≠a');
    })
    .addAnswer('¬øCu√°l es tu correo electr√≥nico?', { capture: true }, async (ctx, { flowDynamic, state }) => {
        await state.update({ email: ctx.body });
        await flowDynamic('Gracias por tu correo.');
    })
    .addAnswer('¬øQu√© plan deseas contratar?', { capture: true }, async (ctx, { flowDynamic, state }) => {
        await state.update({ plan: ctx.body });
        const myState = state.getMyState();
        console.log('Datos recopilados:', myState);
        await flowDynamic(`Tus datos son:\nNombre: ${myState.name}\nN√∫mero de c√©dula: ${myState.idNumber}\nDirecci√≥n: ${myState.address}\nN√∫meros de contacto: ${myState.contactNumbers}\nCorreo electr√≥nico: ${myState.email}\nPlan: ${myState.plan}`);

    })
    .addAnswer('*¬øSon estos datos correctos? (Responde con s√≠ o no)*', { capture: true }, async (ctx, { flowDynamic, state, provider, gotoFlow }) => {
        const myState = state.getMyState();
        console.log('Proveedor recibido:', provider);
        if (ctx.body.toLowerCase() === 's√≠' || ctx.body.toLowerCase() === 'si') {
            const message = `Tienes un agendamiento de instalaci√≥n pendiente en el celular de ventas para el siguiente usuario:\n\nNombre: ${myState.name}\nN√∫mero de c√©dula: ${myState.idNumber}\nDirecci√≥n: ${myState.address}\nN√∫meros de contacto: ${myState.contactNumbers}\nCorreo electr√≥nico: ${myState.email}\nPlan: ${myState.plan}`;
            
            // Enviar mensaje al agente humano
            await sendToHumanAgent(provider, message);

            await flowDynamic('Perfecto, he recopilado tus datos y te voy a dirigir con el asesor de ventas Martin Capablanca.');
        } else {
            await flowDynamic('Por favor, reinicia el proceso y proporciona los datos correctos.');
            state.clear(); // Limpiar estado para reiniciar el flujo
            return gotoFlow(flowRecopilarDatos); // Redirigir al inicio del flujo de recopilaci√≥n de datos
        }
    });

const flowVerificarCobertura = addKeyword(EVENTS.ACTION)
    .addAnswer("Por favor, env√≠a tu ubicaci√≥n ahora para verificar la cobertura.üìç", {
        capture: true,
        waitForLocation: true
    }, async (ctx, { flowDynamic, gotoFlow, state, provider }) => {
        console.log('Datos usuario:üìçüìç ', ctx);
        if (ctx.message && ctx.message.locationMessage) {
            const latitude = ctx.message.locationMessage.degreesLatitude;
            const longitude = ctx.message.locationMessage.degreesLongitude;
            try {
                console.log(`üìç Ubicaci√≥n recibida: Latitud ${latitude}, Longitud ${longitude}`);
                const result = await predictCoverageFromCoordinates(latitude, longitude);
                const message = result.hasCoverage ? '¬°Tenemos cobertura en tu √°rea!' : 'üöÄ Actualmente se est√° expandiendo la cobertura en tu sector, estamos confirmando con el √°rea t√©cnica si ya se cuenta con la disponibilidad inmediata... En breve responderemos a tu mensaje.';
                await flowDynamic(message);

                if (result.hasCoverage) {
                    // Redirigir al siguiente flujo si hay cobertura
                    await state.update({ hasCoverage: true });
                    return gotoFlow(flowRecopilarDatos);
                } else {
                    // Notificar al agente humano si no hay cobertura
                    const userMessage = 'Por favor espera un momento!';
                    const agentMessage = `Usuario con n√∫mero ${ctx.from} y nombre ${ctx.pushName} ha recibido una predicci√≥n de no cobertura. Por favor, verifique manualmente.`;

                    await flowDynamic(userMessage);
                    await sendToHumanAgent(provider, agentMessage);
                }
            } catch (error) {
                await flowDynamic('‚ùå Hubo un error al verificar la cobertura. Por favor, intenta nuevamente m√°s tarde.');
            }
        } else {
            await flowDynamic('‚ùå No se recibi√≥ una ubicaci√≥n v√°lida. Por favor, intenta enviar tu ubicaci√≥n nuevamente.');
            // Mantener el estado hasta recibir una ubicaci√≥n v√°lida
            state.update({ waitingForValidLocation: true });
            return gotoFlow(flowVerificarCobertura);
        }
    });



    
const flowSectorSanadolfo = addKeyword(EVENTS.ACTION)

    .addAnswer(plan_rural_sanadolfo)
    .addAnswer("üó∫ Para verificar la cobertura de nuestro servicio en tu √°rea, por favor env√≠anos tu ubicaci√≥n. üìçüåç", {
        delay: 2000 // Aqu√≠ agregas el delay de 2 segundos
    })
    .addAnswer("Sigue los pasos de este video desde el lugar para donde solicita el servicio!Es muy f√°cil!", {
        media: "https://bots.fututel.com/video_muestra.mp4"
    }, async (_, { gotoFlow }) => {
        // Redirigir al flujo de verificaci√≥n de cobertura
        gotoFlow(flowVerificarCobertura);
    });


const flowSectorQuituro = addKeyword(EVENTS.ACTION)
    .addAnswer(plan_rural_quituro)
    .addAnswer("üó∫ Para verificar la cobertura de nuestro servicio en tu √°rea, por favor env√≠anos tu ubicaci√≥n. üìçüåç", {
        delay: 2000 // Aqu√≠ agregas el delay de 2 segundos
    })
    .addAnswer("Sigue los pasos de este video desde el lugar para donde solicita el servicio!Es muy f√°cil!", {
        media: "https://bots.fututel.com/video_muestra.mp4"
    }, async (_, { gotoFlow }) => {
        // Redirigir al flujo de verificaci√≥n de cobertura
        gotoFlow(flowVerificarCobertura);
    });

const flowSectorRuralCaserio = addKeyword(EVENTS.ACTION)
    .addAnswer(plan_rural_caserio)
    .addAnswer("üó∫ Para verificar la cobertura de nuestro servicio en tu √°rea, por favor env√≠anos tu ubicaci√≥n. üìçüåç", {
        delay: 2000 // Aqu√≠ agregas el delay de 2 segundos
    })
    .addAnswer("Sigue los pasos de este video desde el lugar para donde solicita el servicio!Es muy f√°cil!", {
        media: "https://bots.fututel.com/video_muestra.mp4"
    }, async (_, { gotoFlow }) => {
        // Redirigir al flujo de verificaci√≥n de cobertura
        gotoFlow(flowVerificarCobertura);
    });

const flowSectorRuralSanroque = addKeyword(EVENTS.ACTION)
    .addAnswer(plan_rural_sanroque)
    .addAnswer("üó∫ Para verificar la cobertura de nuestro servicio en tu √°rea, por favor env√≠anos tu ubicaci√≥n. üìçüåç", {
        delay: 2000 // Aqu√≠ agregas el delay de 2 segundos
    })
    .addAnswer("Sigue los pasos de este video desde el lugar para donde solicita el servicio!Es muy f√°cil!", {
        media: "https://bots.fututel.com/video_muestra.mp4"
    }, async (_, { gotoFlow }) => {
        // Redirigir al flujo de verificaci√≥n de cobertura
        gotoFlow(flowVerificarCobertura);
    });

const flowSectorRural = addKeyword(EVENTS.ACTION)
    .addAnswer(plan_rural)
    .addAnswer("üó∫ Para verificar la cobertura de nuestro servicio en tu √°rea, por favor env√≠anos tu ubicaci√≥n. üìçüåç", {
        delay: 2000 // Aqu√≠ agregas el delay de 2 segundos
    })
    .addAnswer("Sigue los pasos de este video desde el lugar para donde solicita el servicio!Es muy f√°cil!", {
        media: "https://bots.fututel.com/video_muestra.mp4"
    }, async (_, { gotoFlow }) => {
        // Redirigir al flujo de verificaci√≥n de cobertura
        gotoFlow(flowVerificarCobertura);
    });

const flowSectorUrbano = addKeyword(EVENTS.ACTION)
    .addAnswer(plan_urbano)
    .addAnswer("üó∫ Para verificar la cobertura de nuestro servicio en tu √°rea, por favor env√≠anos tu ubicaci√≥n. üìçüåç", {
        delay: 2000 // Aqu√≠ agregas el delay de 2 segundos
    })
    .addAnswer("Sigue los pasos de este video desde el lugar para donde solicita el servicio!Es muy f√°cil!", {
        media: "https://bots.fututel.com/video_muestra.mp4"
    }, async (_, { gotoFlow }) => {
        // Redirigir al flujo de verificaci√≥n de cobertura
        gotoFlow(flowVerificarCobertura);
    });

const flowServicios = addKeyword(EVENTS.ACTION).addAnswer(
    menu_planes,
    {
      capture: true,
    },
    async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
        console.log('datos usuario: ',ctx);
      if (!["1", "2", "3", "4","5","6","7","0"].includes(ctx.body)) {
        return fallBack('*Respuesta no v√°lida, por favor selecciona una de las opciones.*');
      }
  
      switch (ctx.body) {
        case "1":
          return  gotoFlow(flowSectorUrbano);
        case "2":
          return  gotoFlow(flowSectorRural);
        case "3":
          return  gotoFlow(flowSectorRuralSanroque);
        case "4":
          return  gotoFlow(flowSectorRuralCaserio);
        case "5":
            return  gotoFlow(flowSectorQuituro);
        case "6":
            return  gotoFlow(flowSectorSanadolfo);
        case "0":
          return  await flowDynamic("Saliendo... Puedes volver a acceder a este men√∫ escribiendo *Menu*");
      }
    }
  );

const flowFacturas = addKeyword(EVENTS.ACTION)
  .addAnswer(
      'üëãüèª ¬°Hola! Gracias por contactarnos. Para asuntos relacionados con facturaci√≥n, por favor comun√≠cate al siguiente contacto:\n\n' +
      'üë§ 3163123623\n\n' +
      'Nota: Dale click sobre el n√∫mero y presiona "chatear con" para ir directamente a la conversaci√≥n con el agente de facturaci√≥n que te atender√°.'
  );

const flowSoporte = addKeyword(EVENTS.ACTION)
    .addAnswer(
        'Para temas relacionados con inconvenientes con el servicio, por favor comunicarse con el √°rea de üñ• Soporte T√©cnico. Para la verificaci√≥n de tu internet. üõ†\n\n' +
        'üë®‚ÄçüîßSOPORTE TECNICO 1 üì≤ 3188724601\n' +
        'üë©üèª‚ÄçüîßSOPORTE TECNICO 2 üì≤ 3163290810\n' +
        'üë®üèΩ‚ÄçüîßSOPORTE TECNICO 3 üì≤ 3157155285\n\n' +
        'Nota: Dale click sobre el n√∫mero y presiona "Chatear con" para ir directamente a la conversaci√≥n con el agente de soporte que te atender√°.'
    );

const flowOtrasConsultas = addKeyword(EVENTS.ACTION)
    .addAnswer('Por favor, proporciona m√°s detalles sobre tu consulta.')
    .addAction({ capture: true }, async (ctx, { flowDynamic }) => {
        const userMessage = ctx.body;
        console.log("mensaje a enviar al chatbot: ",userMessage);
        const reply = await queryExternalChatbot(userMessage);
        await flowDynamic(reply);
    });

const flowPrincipal = addKeyword([
        'hola', 
        'ole', 
        'alo', 
        'buenos dias', 
        'buenas tardes', 
        'buenas noches', 
        'menu', 
        'quiero internet', 
        'solicitar internet', 
        'contratar internet', 
        'servicio de internet', 
        'planes de internet', 
        'internet hogar', 
        'internet para mi casa', 
        'cobertura de internet', 
        'instalaci√≥n de internet', 
        'internet barato', 
        'mejor internet', 
        'precio de internet', 
        'cotizaci√≥n internet', 
        'internet empresarial', 
        'internet oficina', 
        'wifi', 
        'internet fibra √≥ptica', 
        'internet alta velocidad', 
        'paquetes de internet', 
        'velocidad de internet', 
        'internet ilimitado', 
        'internet prepago', 
        'internet mensual', 
        'promociones de internet'
    ])
    .addAnswer(
        menu,
        { capture: true },
        async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            console.log('datos usuario: ', ctx);
            if (!["1", "2", "3", "4", "0"].includes(ctx.body)) {
                return fallBack('Respuesta no v√°lida, por favor selecciona una de las opciones.');
            }
    
            switch (ctx.body) {
                case "1":
                    return gotoFlow(flowServicios);
                case "2":
                    return gotoFlow(flowFacturas);
                case "3":
                    return gotoFlow(flowSoporte);
                case "4":
                    return gotoFlow(flowOtrasConsultas);
                case "0":
                    return await flowDynamic("Saliendo... Puedes volver a acceder a este men√∫ escribiendo *Menu*");
            }
        }
    );

const main = async () => {

    const adapterDB = new MongoAdapter({
        dbUri: 'mongodb://198.50.181.104:27017',
        dbName: 'db_bot',
     })
    // const adapterDB = new MySQLAdapter({
    //     host: MYSQL_DB_HOST,
    //     user: MYSQL_DB_USER,
    //     database: MYSQL_DB_NAME,
    //     password: MYSQL_DB_PASSWORD,
    //     port: MYSQL_DB_PORT,
    // })
    const adapterFlow = createFlow([flowPrincipal,flowServicios,flowFacturas,flowSoporte,flowOtrasConsultas,flowSectorUrbano,flowSectorRural,flowSectorRuralSanroque,flowSectorRuralCaserio,flowSectorQuituro,flowSectorSanadolfo ,flowVerificarCobertura,flowRecopilarDatos,flowVoice])
    const adapterProvider = createProvider(BaileysProvider)
    createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB,
    })
    QRPortalWeb()
}

main()
